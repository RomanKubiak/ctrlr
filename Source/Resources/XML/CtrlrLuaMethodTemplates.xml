<?xml version="1.0" encoding="utf-8"?>
<methods>
  <luaMethod name="luaModulatorValueChange">
    --
    -- Called when a modulator value changes
    -- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html
    -- @value    new numeric value of the modulator
    --
    __method_name = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)
    end
  </luaMethod>

  <luaMethod name="componentLuaMouseMoved">
    --
    -- Called when the mouse moves over a component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="componentLuaMouseDown">
    --
    -- Called when a mouse is down on this component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="componentLuaMouseDrag">
    --
    -- Called when a mouse is dragged (down + left click) over this component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="componentLuaMouseDoubleClick">
    --
    -- Called when a double-click event occurs on this component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomResizedCallback">
    --
    -- Called when a component is resized
    -- @comp
    --

    __method_name = function(--[[ CtrlrComponent --]] comp)
    end
  </luaMethod>

  <luaMethod name="uiCustomPaintCallback">
    --
    -- Called when a component needs repainting
    -- @comp
    -- @g    http://ctrlr.org/api/class_ctrlr_lua_graphics.html
    --              see also http://www.rawmaterialsoftware.com/juce/api/classGraphics.html
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ CtrlrComponent --]] g)
    end
  </luaMethod>

  <luaMethod name="uiCustomPaintOverChildrenCallback">
    --
    -- Called when you want to paint over all other elements of the component
    -- @comp
    -- @g    http://ctrlr.org/api/class_ctrlr_lua_graphics.html
    --              see also http://www.rawmaterialsoftware.com/juce/api/classGraphics.html
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ Graphics --]] g)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseDownCallback">
    --
    -- Called when a mouse DOWN (any mouse button) event happens on a component
    -- @comp
    -- @event   http://www.rawmaterialsoftware.com/juce/api/classMouseEvent.html
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseUpCallback">
    --
    -- Called when a mouse UP (any mouse button) event happens on a component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseDoubleClickCallback">
    --
    -- Called when a mouse DOUBLE CLICK (any mouse button) event happens on a component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseEnterCallback">
    --
    -- Called when the mouse cursors enters a component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseWheelMoveCallback">
    --
    -- Called when the mouse wheel is moved
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event, --[[ number --]] incX, --[[ number --]] incY)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseExitCallback">
    --
    -- Called when the mouse cursors exits a component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseDragCallback">
    --
    -- Called when the mouse is dragged over a component (mouse button is down and the mouse is moved)
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomMouseMoveCallback">
    --
    -- Called when the mouse moves over a component
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)
    end
  </luaMethod>

  <luaMethod name="uiCustomKeyDownCallback">
    --
    -- Called when the a key is pressed and the component has focus
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[KeyPress --]] keyEvent, --[[ Component --]] originatingComponent)
    end
  </luaMethod>

  <luaMethod name="uiCustomKeyStateChangedCallback">
    --
    -- Called when the a key state changes
    --

    __method_name = function(--[[ CtrlrComponent --]] comp, --[[ bool --]] isKeyDown, --[[ Component --]] originatingComponent)
    end
  </luaMethod>

  <luaMethod name="uiCustomIsInterestedInDragSourceCallback">
    --
    -- This method needs to return information if this component
    -- is interested in a drag and drop event
    --
    -- the parameter is a DragAndDropSourceDetails object

    __method_name = function(--[[ CtrlrComponent --]] component, --[[ DragAndDropSourceDetails --]] dragSourceDetails)
        return (1)
    end
  </luaMethod>

  <luaMethod name="uiCustomItemDragEnterCallback">
    --
    -- Called when a DragAndDrop event enters this component
    --

    __method_name = function(--[[ CtrlrComponent --]] component, --[[ DragAndDropSourceDetails --]] dragSourceDetails)
    end
  </luaMethod>

  <luaMethod name="uiCustomItemDragMoveCallback">
    --
    -- Called when a DragAndDrop event occurs over this component
    --

    __method_name = function(--[[ CtrlrComponent --]] component, --[[ DragAndDropSourceDetails --]] dragSourceDetails)
    end
  </luaMethod>

  <luaMethod name="uiCustomItemDragExitCallback">
    --
    -- Called when a DragAndDrop event exits this component
    --

    __method_name = function(--[[ CtrlrComponent --]] component, --[[ DragAndDropSourceDetails --]] dragSourceDetails)
    end
  </luaMethod>

  <luaMethod name="uiCustomStartDraggingCallback">
    --
    -- This method needs to return source information for a drag event
    -- the return value is a DragAndDropSourceDetails object
    --

    __method_name = function(--[[ CtrlrComponent --]] component, --[[ MouseEvent --]] mouseEvent)
        details = DragAndDropSourceDetails()
        return (details)
    end
  </luaMethod>

  <luaMethod name="uiCustomItemDroppedCallback">
    --
    -- Called when something is dropped on this component
    --

    __method_name = function(--[[ CtrlrComponent --]] component, --[[ DragAndDropSourceDetails --]] dragSourceDetails)
    end
  </luaMethod>

  <luaMethod name="uiTabsCurrentTabChanged">
    --
    -- Called when the current tab in an uiTabs component is changed
    --

    __method_name = function(--[[ CtrlrModulator --]] mod, --[[ number --]] tabIndex)
    end
  </luaMethod>

  <luaMethod name="luaPanelPaintBackground">
    --
    -- Called when the panel background needs repainting
    --

    __method_name = function(--[[ CtrlrPanelCanvas --]] canvas, --[[ Graphics --]] g)
    end
  </luaMethod>

  <luaMethod name="luaPanelResized">
    --
    -- Called when the panel is resized
    --

    __method_name = function(--[[ CtrlrPanelEditor --]] panel)
    end
  </luaMethod>

  <luaMethod name="luaPanelSaved">
    --
    -- Called when the panel is saved
    -- @saveType         A number that indicates the type of file beeing saved http://ctrlr.org/api/class_ctrlr_panel.html
    -- @destinationFile  A file object http://ctrlr.org/api/class_ctrlr_lua_file.html
    --                      see more http://www.rawmaterialsoftware.com/juce/api/classFile.html
    --

    __method_name = function(--[[ number --]] saveType, --[[ File --]] destinationFile)
    end
  </luaMethod>

  <luaMethod name="luaPanelBeforeLoad">
    --
    -- Called when the panel is created, no modulators will exist at this point
    -- consider this the panels constructor
    --
    __method_name = function()
    end
  </luaMethod>

  <luaMethod name="luaPanelProgramChanged">
    --
    -- Called after a program change has been sent from the panel
    -- it's called after to give the user a chance to update the panel state based on the state of the device
    --
    -- @program program number
    -- @bankLsb bank number (LSB part CC32)
    -- @bankMsb bank number (MSB part CC0)
    --

    __method_name = function(--[[ number --]] program, --[[ number --]] bankLsb, --[[ number --]] bankMsb)
    end
  </luaMethod>

  <luaMethod name="luaPanelModulatorValueChanged">
    --
    -- Called when any modulator changes on the panel
    --
    -- @program modulator that changed
    -- @value new modulator value
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)
    end
  </luaMethod>

  <luaMethod name="luaPanelMidiReceived">
    --
    -- Called when a panel receives a midi message (does not need to match any modulator mask)
    -- @midi   CtrlrMidiMessage object
    --

    __method_name = function(--[[ CtrlrMidiMessage --]] midi)
    end
  </luaMethod>

  <luaMethod name="luaPanelMidiMultiReceived">
    --
    -- Called when a panel receives a multi MIDI message
    -- (needs to match a modulator mask)
    -- @midi   CtrlrMidiMessage object, this will contain all the midi messages
    --         that make up this multi message
    --

    __method_name = function(--[[ CtrlrMidiMessage --]] multiMidi)
    end
  </luaMethod>

  <luaMethod name="luaPanelOSCReceived">
      --
      -- Called when a panel receives a OSC message
      -- @path - osc path
      -- @types - a string representing what types are included in the incoming messages
      -- @arguments - a lua table of all incoming arguments
      --

      __method_name = function(--[[ string --]] path, --[[ string --]] types, --[[ table --]] arguments)
      end
  </luaMethod>

  <luaMethod name="uiLabelChangedCbk">
    --
    -- Called when the contents of a Label are changed
    -- @label
    -- @newContent    a string that the label now contains
    --

    __method_name = function(--[[ CtrlrLabel --]] label, --[[ String --]] newContent)
    end
  </luaMethod>

  <luaMethod name="uiFileListFileClicked">
    --
    -- Called when a file is clicked
    --
    -- @modulator the modulator the event occured on
    -- @file      a File object that represents the clicked file
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ File --]] file)
    end
  </luaMethod>

  <luaMethod name="uiFileListFileDoubleClicked">
    --
    -- Called when a file is double clicked
    --
    -- @modulator the modulator the event occured on
    -- @file      a File object that represents the double clicked file
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ File --]] file)
    end
  </luaMethod>

  <luaMethod name="uiListBoxItemClicked">
    --
    -- Called when an item is clicked
    --
    -- @modulator the modulator the event occured on
    -- @value      a integer that represents the clicked item
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)
    end
  </luaMethod>

  <luaMethod name="uiListBoxItemDoubleClicked">
    --
    -- Called when an item is double clicked
    --
    -- @modulator the modulator the event occured on
    -- @value      an integer that represents the double clicked item
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)
    end
  </luaMethod>

  <luaMethod name="uiListBoxItemDeleteKeyPressed">
    --
    -- Called when a selected item has delete key pressed
    --
    -- @modulator the modulator the event occured on
    -- @value      a integer that represents the selected item
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)
    end
  </luaMethod>

  <luaMethod name="uiListBoxItemReturnKeyPressed">
    --
    -- Called when a selected item has return key pressed
    --
    -- @modulator the modulator the event occured on
    -- @value      an integer that represents the selected item
    --

    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)
    end
  </luaMethod>

  <luaMethod name="uiWaveFormThumbnailChangedCallback">
    --
    -- Called a AudioThumbnail has changed
    --
    -- @comp The Waveform component that holds the changed AudioThumbnail
    --

    __method_name = function(--[[ CtrlrWaveform --]] comp)
    end
  </luaMethod>

  <luaMethod name="uiWaveFormFilesDroppedCallback">
    --
    -- Callback to indicate that the user has dropped the files onto this waveform
    --

    -- @files   - StringArray object that has the file paths
    -- @x       - x coordinate where the event occured
    -- @y       - y coordinate where the event occured

    __method_name = function(--[[ StringArray --]] files, --[[ number --]] x, --[[ number --]] y)
    end
  </luaMethod>


  <luaMethod name="uiWaveFormSourceChangedCallback">
    --
    -- Called when the source for a Waveform component has changed (a new file has been loaded or the reset() method has been called)
    --
    -- @comp The Waveform component that holds the changed AudioThumbnail
    --

    __method_name = function(--[[ CtrlrWaveform --]] comp)
    end
  </luaMethod>

  <luaMethod name="luaPanelLoaded">
    --
    -- Called when the panel has finished loading
    --
    -- @type the type of instance beeing started, types available in the CtrlrPanel
    -- class as enum
    --
    -- InstanceSingle
	-- InstanceMulti
	-- InstanceSingleRestriced
	-- InstanceSingleEngine
	-- InstanceMultiEngine
	-- InstanceSingleRestrictedEngine
	--
    __method_name = function(--[[ CtrlrInstance --]] type)
    end
  </luaMethod>

  <luaMethod name="luaPanelMidiChannelChanged">
    --
    -- Called when a MIDI channel property for the panel changes
    --
    __method_name = function(--[[ number --]] channelType, --[[ number --]] newChannel)
    end
  </luaMethod>

  <luaMethod name="luaModulatorGetValueForMIDI">
    --
    --
    --
    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] numericModulatorValue)
      return numericModulatorValue
    end
  </luaMethod>

  <luaMethod name="luaModulatorGetValueFromMIDI">
    --
    --
    --
    __method_name = function(--[[ CtrlrModulator --]] modulator, --[[ CtrlrMidiMessage --]] midiMessage, --[[ number --]] numericMidiValue)
      return numericMidiValue
    end
  </luaMethod>

  <luaMethod name="luaPanelGlobalChanged">
    --
    -- Called when a global variable has changed it's value
    --

    __method_name = function(--[[ number --]] index, --[[ number --]] value)
    end
  </luaMethod>

  <luaMethod name="luaPanelMessageHandler">
    --
    -- Called when a messages needs to be displayed to the user.
    --

    -- @message   - a String object with the message contents
    -- @type      - a type of message (4 levels defined success,failure,information,warning)

    __method_name = function(--[[ String --]] message, --[[ number --]] type)
    end
  </luaMethod>

  <luaMethod name="luaPanelFileDragDropHandler">
    --
    -- Callback to indicate that the user has dropped the files onto this panel
    --

    -- @files   - StringArray object that has the file paths
    -- @x       - x coordinate where the event occured
    -- @y       - y coordinate where the event occured

    __method_name = function(--[[ StringArray --]] files, --[[ number --]] x, --[[ number --]] y)
    end
  </luaMethod>

  <luaMethod name="luaPanelFileDragEnterHandler">
    --
    -- Callback to indicate that some files are being dragged over this panel
    --

    -- @files   - StringArray object that has the file paths
    -- @x       - x coordinate where the event occured
    -- @y       - y coordinate where the event occured

    __method_name = function(--[[ StringArray --]] files, --[[ number --]] x, --[[ number --]] y)
    end
  </luaMethod>

  <luaMethod name="luaPanelFileDragExitHandler">
    --
    -- Callback to indicate that the mouse has moved away from this panel
    --

    -- @files   - StringArray object that has the file paths

    __method_name = function(--[[ StringArray --]] files)
    end
  </luaMethod>

  <luaMethod name="luaPanelResourcesLoaded">
      --
      -- Callback to indicate that all resources are ready for a panel
      --
      __method_name = function()
      end
  </luaMethod>

  <luaMethod name="luaCtrlrSaveState">
    --
    -- Called when data needs saving
    --
    __method_name = function(--[[ ValueTree --]] stateData)
    end
  </luaMethod>
  <luaMethod name="luaCtrlrResoreState">
    --
    -- Called when data is restored
    --
    __method_name = function(--[[ ValueTree --]] stateData)
    end
  </luaMethod>
  <luaMethod name="luaPanelSaveState">
    --
    -- Called when data needs saving
    --
    __method_name = function(--[[ ValueTree --]]stateData)
    end
  </luaMethod>
  <luaMethod name="luaPanelRestoreState">
    --
    -- Called when data is restored
    --
    __method_name = function(--[[ ValueTree --]] stateData)
    end
  </luaMethod>

  <luaMethod name="luaPanelMidiSnapshotPre">
    --
    -- Called before a snapshot is sent to the device
    --
    -- @buffer MidiBuffer all the midi messages that will be sent
    --
    __method_name = function(--[[ MidiBuffer --]] buffer)
    end
  </luaMethod>

  <luaMethod name="luaPanelMidiSnapshotPost">
    --
    -- Called when data is restored
    --
    -- @buffer MidiBuffer all the midi messages that have been sent
    --
    __method_name = function(--[[ MidiBuffer --]] buffer)
    end
  </luaMethod>

  <luaMethod name="luaAudioProcessBlock">
    --
    -- Called on the audio thread, can't access any
    -- panel/modulator/component properties or objects
    -- this is only for MIDI data processing
    --
    -- @midiData midi data coming from the plugin host
    -- @position sample accurate position, midi events in the buffer will
    --           be timestamped according to this data
    --
    __method_name = function(--[[ MidiBuffer --]] midiData, --[[ AudioProcessor::CurrentPositionInfo --]] position)
    end
  </luaMethod>

  <luaMethod name="LookAndFeel" resource="LookAndFeel_lua">
  </luaMethod>

  <utilityMethods>
  	<utility name="table_dump" description="Dump information about a table" alwaysUpdate="1" uuid="00000000000000000000000000000001">
-- @1.1
--
-- Print table contents
--
function table_dump(table)
	for key,value in ipairs(table) do
		_DBG ("KEY= ["..key.."]")

		if (type(value) == "table") then
			table_dump(value)
		elseif (type(value) == "nil") then
			_DBG (" = NIL")
		else
			what (value)
		end
	end
end
	</utility>

    <utility name="what" description="Prints information on any variable passed in as argument, useful if you need to find out what you are dealing with" alwaysUpdate="1" uuid="00000000000000000000000000000002">
-- @1.1
--
-- Print methods for an object
--
function what(o)
	info = class_info(o)
	if info ~= nil then
		ret = "Object type [" .. info.name .. "]\n-----------------------------------------------------------------\n\n".."Members:\n"

		if info.name == "table" then
			table_dump(o)
		end

		for k, v in pairs(info.methods) do
			ret = ret .. string.format ("\t%30s:\t%5s\n", k, type(v))
		end
		ret = ret .. "\n\nAttributes:\n"
		for k, v in pairs(info.attributes) do
			ret = ret .. string.format ("\t%30s:\t%5s\n", k, type(v))
		end
		ret = ret .. "\n-----------------------------------------------------------------"
	end

	console (ret)
	return ret
end
    </utility>

    <utility name="how" description="Prints all available lua classes bound from Ctrlr" alwaysUpdate="1" uuid="00000000000000000000000000000003">
-- @1.1
--
-- Print all available classes
--
function how()
	ret = "Available classes:\n"
	ret = ret .. "\n-----------------------------------------------------------------"
	for i,v in ipairs(class_names()) do
		ret = ret .. "\t".. v .. "\n"
	end
	ret = ret .. "\n-----------------------------------------------------------------"
	console (J(ret))
	return ret
end
  </utility>

  <utility name="json" description="JSON implementation" alwaysUpdate="1" uuid="00000000000000000000000000000004" resource="json_lua" />
  <utility name="debug" description="clidebugger" alwaysUpdate="1" uuid="00000000000000000000000000000005" resource="debugger_lua" />
  <utility name="inspect" description="Lua table inspector" alwaysUpdate="1" uuid="00000000000000000000000000000006" resource="inspect_lua" />
  </utilityMethods>
</methods>
